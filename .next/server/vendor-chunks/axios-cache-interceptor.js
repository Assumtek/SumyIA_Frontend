"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/axios-cache-interceptor";
exports.ids = ["vendor-chunks/axios-cache-interceptor"];
exports.modules = {

/***/ "(action-browser)/./node_modules/axios-cache-interceptor/dist/index.modern.js":
/*!*******************************************************************!*\
  !*** ./node_modules/axios-cache-interceptor/dist/index.modern.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   buildKeyGenerator: () => (/* binding */ buildKeyGenerator),\n/* harmony export */   buildMemoryStorage: () => (/* binding */ buildMemoryStorage),\n/* harmony export */   buildStorage: () => (/* binding */ buildStorage),\n/* harmony export */   buildWebStorage: () => (/* binding */ buildWebStorage),\n/* harmony export */   canStale: () => (/* binding */ canStale),\n/* harmony export */   createCacheResponse: () => (/* binding */ createCacheResponse),\n/* harmony export */   createValidateStatus: () => (/* binding */ createValidateStatus),\n/* harmony export */   defaultHeaderInterpreter: () => (/* binding */ defaultHeaderInterpreter),\n/* harmony export */   defaultKeyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   defaultRequestInterceptor: () => (/* binding */ defaultRequestInterceptor),\n/* harmony export */   defaultResponseInterceptor: () => (/* binding */ defaultResponseInterceptor),\n/* harmony export */   isExpired: () => (/* binding */ isExpired),\n/* harmony export */   isMethodIn: () => (/* binding */ isMethodIn),\n/* harmony export */   isStorage: () => (/* binding */ isStorage),\n/* harmony export */   mustRevalidate: () => (/* binding */ mustRevalidate),\n/* harmony export */   regexOrStringMatch: () => (/* binding */ regexOrStringMatch),\n/* harmony export */   setupCache: () => (/* binding */ setupCache),\n/* harmony export */   testCachePredicate: () => (/* binding */ testCachePredicate),\n/* harmony export */   updateCache: () => (/* binding */ updateCache),\n/* harmony export */   updateStaleRequest: () => (/* binding */ updateStaleRequest)\n/* harmony export */ });\n/* harmony import */ var cache_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cache-parser */ \"(action-browser)/./node_modules/cache-parser/dist/index.mjs\");\n/* harmony import */ var fast_defer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-defer */ \"(action-browser)/./node_modules/fast-defer/dist/index.mjs\");\n/* harmony import */ var object_code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! object-code */ \"(action-browser)/./node_modules/object-code/dist/index.mjs\");\n/*!\n * Axios Cache Interceptor 1.8.0\n * (c) 2021-present Arthur Fiorette & Contributors\n * Released under the MIT License.\n */\n\n\n\n\nconst Header = Object.freeze({\n  /**\n   * ```txt\n   * If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\n   */\n  IfModifiedSince: 'if-modified-since',\n  /**\n   * ```txt\n   * Last-Modified: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified\n   */\n  LastModified: 'last-modified',\n  /**\n   * ```txt\n   * If-None-Match: \"<etag_value>\"\n   * If-None-Match: \"<etag_value>\", \"<etag_value>\", â€¦\n   * If-None-Match: *\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match\n   */\n  IfNoneMatch: 'if-none-match',\n  /**\n   * ```txt\n   * Cache-Control: max-age=604800\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\n   */\n  CacheControl: 'cache-control',\n  /**\n   * ```txt\n   * Pragma: no - cache;\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma\n   */\n  Pragma: 'pragma',\n  /**\n   * ```txt\n   * ETag: W / '<etag_value>';\n   * ETag: '<etag_value>';\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\n   */\n  ETag: 'etag',\n  /**\n   * ```txt\n   * Expires: <http-date>\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires\n   */\n  Expires: 'expires',\n  /**\n   * ```txt\n   * Age: <delta-seconds>\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age\n   */\n  Age: 'age',\n  /**\n   * Used internally as metadata to mark the cache item as revalidatable and enabling\n   * stale cache state Contains a string of ASCII characters that can be used as ETag for\n   * `If-Match` header Provided by user using `cache.etag` value.\n   *\n   * ```txt\n   * X-Axios-Cache-Etag: \"<etag_value>\"\n   * ```\n   */\n  XAxiosCacheEtag: 'x-axios-cache-etag',\n  /**\n   * Used internally as metadata to mark the cache item as revalidatable and enabling\n   * stale cache state may contain `'use-cache-timestamp'` if `cache.modifiedSince` is\n   * `true`, otherwise will contain a date from `cache.modifiedSince`. If a date is\n   * provided, it can be used for `If-Modified-Since` header, otherwise the cache\n   * timestamp can be used for `If-Modified-Since` header.\n   *\n   * ```txt\n   * X-Axios-Cache-Last-Modified: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * X-Axios-Cache-Last-Modified: use-cache-timestamp\n   * ```\n   */\n  XAxiosCacheLastModified: 'x-axios-cache-last-modified',\n  /**\n   * Used internally as metadata to mark the cache item able to be used if the server\n   * returns an error. The stale-if-error response directive indicates that the cache can\n   * reuse a stale response when any error occurs.\n   *\n   * ```txt\n   * XAxiosCacheStaleIfError: <seconds>\n   * ```\n   */\n  XAxiosCacheStaleIfError: 'x-axios-cache-stale-if-error'\n});\n\nconst defaultHeaderInterpreter = (headers, location) => {\n  if (!headers) return 'not enough headers';\n  const cacheControl = headers[Header.CacheControl];\n  if (cacheControl) {\n    const cc = (0,cache_parser__WEBPACK_IMPORTED_MODULE_0__.parse)(String(cacheControl));\n    if (\n    // Header told that this response should not be cached.\n    cc.noCache || cc.noStore ||\n    // Server side handling private data\n    location === 'server' && cc.private) {\n      return 'dont cache';\n    }\n    if (cc.immutable) {\n      // 1 year is sufficient, as Infinity may cause problems with certain storages.\n      // It might not be the best way, but a year is better than none. Facebook shows\n      // that a browser session stays at the most 1 month.\n      return {\n        cache: 1000 * 60 * 60 * 24 * 365\n      };\n    }\n    if (cc.maxAge !== undefined) {\n      const age = headers[Header.Age];\n      return {\n        cache: age ?\n        // If age is present, we must subtract it from maxAge\n        (cc.maxAge - Number(age)) * 1000 : cc.maxAge * 1000,\n        // Already out of date, must be requested again\n        stale:\n        // I couldn't find any documentation about who should be used, as they\n        // are not meant to overlap each other. But, as we cannot request in the\n        // background, as the stale-while-revalidate says, and we just increase\n        // its staleTtl when its present, max-stale is being preferred over\n        // stale-while-revalidate.\n        cc.maxStale !== undefined ? cc.maxStale * 1000 : cc.staleWhileRevalidate !== undefined ? cc.staleWhileRevalidate * 1000 : undefined\n      };\n    }\n  }\n  const expires = headers[Header.Expires];\n  if (expires) {\n    const milliseconds = Date.parse(String(expires)) - Date.now();\n    return milliseconds >= 0 ? {\n      cache: milliseconds\n    } : 'dont cache';\n  }\n  return 'not enough headers';\n};\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/** Tests an response against a {@link CachePredicateObject}. */\nasync function testCachePredicate(response, predicate) {\n  if (typeof predicate === 'function') {\n    return predicate(response);\n  }\n  const {\n    statusCheck,\n    responseMatch,\n    containsHeaders\n  } = predicate;\n  if (statusCheck && !(await statusCheck(response.status)) || responseMatch && !(await responseMatch(response))) {\n    return false;\n  }\n  if (containsHeaders) {\n    for (const [header, _predicate] of Object.entries(containsHeaders)) {\n      var _response$headers$hea;\n      if (!(await _predicate( // Avoid bugs in case the header is not in lower case\n      (_response$headers$hea = response.headers[header.toLowerCase()]) != null ? _response$headers$hea : response.headers[header]))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/**\n * Determines whether a given URL matches a specified pattern, which can be either a string or a regular expression.\n *\n * @param matchPattern - The pattern to match against\n *   - If it's a regular expression, it will be reset to ensure consistent behavior for stateful regular expressions.\n *   - If it's a string, the function checks if the URL contains the string.\n * @param configUrl - The URL to test against the provided pattern; normally `config.url`.\n * @returns `true` if the `configUrl` matches the `matchPattern`\n */\nfunction regexOrStringMatch(matchPattern, configUrl) {\n  if (matchPattern instanceof RegExp) {\n    matchPattern.lastIndex = 0; // Reset the regex to ensure consistent matching\n    return matchPattern.test(configUrl);\n  }\n  return configUrl.includes(matchPattern);\n}\n\n/**\n * Creates a new validateStatus function that will use the one already used and also\n * accept status code 304.\n */\nfunction createValidateStatus(oldValidate) {\n  return oldValidate ? status => oldValidate(status) || status === 304 : status => status >= 200 && status < 300 || status === 304;\n}\n/** Checks if the given method is in the methods array */\nfunction isMethodIn(requestMethod = 'get', methodList = []) {\n  requestMethod = requestMethod.toLowerCase();\n  return methodList.some(method => method === requestMethod);\n}\n/**\n * This function updates the cache when the request is stale. So, the next request to the\n * server will be made with proper header / settings.\n */\nfunction updateStaleRequest(cache, config) {\n  config.headers || (config.headers = {});\n  const {\n    etag,\n    modifiedSince\n  } = config.cache;\n  if (etag) {\n    var _cache$data;\n    const etagValue = etag === true ? (_cache$data = cache.data) == null ? void 0 : _cache$data.headers[Header.ETag] : etag;\n    if (etagValue) {\n      config.headers[Header.IfNoneMatch] = etagValue;\n    }\n  }\n  if (modifiedSince) {\n    config.headers[Header.IfModifiedSince] = modifiedSince === true ?\n    // If last-modified is not present, use the createdAt timestamp\n    cache.data.headers[Header.LastModified] || new Date(cache.createdAt).toUTCString() : modifiedSince.toUTCString();\n  }\n}\n/**\n * Creates the new date to the cache by the provided response. Also handles possible 304\n * Not Modified by updating response properties.\n */\nfunction createCacheResponse(response, previousCache) {\n  if (response.status === 304 && previousCache) {\n    // Set the cache information into the response object\n    response.cached = true;\n    response.data = previousCache.data;\n    response.status = previousCache.status;\n    response.statusText = previousCache.statusText;\n    // Update possible new headers\n    response.headers = _extends({}, previousCache.headers, response.headers);\n    // return the old cache\n    return previousCache;\n  }\n  // New Response\n  return {\n    data: response.data,\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers\n  };\n}\n\nfunction defaultRequestInterceptor(axios) {\n  const onFulfilled = async config => {\n    config.id = axios.generateKey(config);\n    if (config.cache === false) {\n      return config;\n    }\n    // merge defaults with per request configuration\n    config.cache = _extends({}, axios.defaults.cache, config.cache);\n    // ignoreUrls (blacklist)\n    if (typeof config.cache.cachePredicate === 'object' && config.cache.cachePredicate.ignoreUrls && config.url) {\n      for (const url of config.cache.cachePredicate.ignoreUrls) {\n        if (regexOrStringMatch(url, config.url)) {\n          return config;\n        }\n      }\n    }\n    // allowUrls\n    if (typeof config.cache.cachePredicate === 'object' && config.cache.cachePredicate.allowUrls && config.url) {\n      let matched = false;\n      for (const url of config.cache.cachePredicate.allowUrls) {\n        if (regexOrStringMatch(url, config.url)) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return config;\n      }\n    }\n    // Applies sufficient headers to prevent other cache systems to work along with this one\n    //\n    // Its currently used before isMethodIn because if the isMethodIn returns false, the request\n    // shouldn't be cached an therefore neither in the browser.\n    if (config.cache.cacheTakeover) {\n      var _config$headers, _Header$CacheControl, _config$headers$_Head, _config$headers2, _Header$Pragma, _config$headers2$_Hea, _config$headers3, _Header$Expires, _config$headers3$_Hea;\n      (_config$headers$_Head = (_config$headers = config.headers)[_Header$CacheControl = Header.CacheControl]) != null ? _config$headers$_Head : _config$headers[_Header$CacheControl] = 'no-cache';\n      (_config$headers2$_Hea = (_config$headers2 = config.headers)[_Header$Pragma = Header.Pragma]) != null ? _config$headers2$_Hea : _config$headers2[_Header$Pragma] = 'no-cache';\n      (_config$headers3$_Hea = (_config$headers3 = config.headers)[_Header$Expires = Header.Expires]) != null ? _config$headers3$_Hea : _config$headers3[_Header$Expires] = '0';\n    }\n    if (!isMethodIn(config.method, config.cache.methods)) {\n      return config;\n    }\n    // Assumes that the storage handled staled responses\n    let cache = await axios.storage.get(config.id, config);\n    const overrideCache = config.cache.override;\n    // Not cached, continue the request, and mark it as fetching\n    // biome-ignore lint/suspicious/noConfusingLabels: required to break condition in simultaneous accesses\n    ignoreAndRequest: if (cache.state === 'empty' || cache.state === 'stale' || cache.state === 'must-revalidate' || overrideCache) {\n      // This checks for simultaneous access to a new key. The js event loop jumps on the\n      // first await statement, so the second (asynchronous call) request may have already\n      // started executing.\n      if (axios.waiting.has(config.id) && !overrideCache) {\n        cache = await axios.storage.get(config.id, config);\n        // @ts-expect-error This check is required when a request has it own cache deleted manually, lets\n        // say by a `axios.storage.delete(key)` and has a concurrent loading request.\n        // Because in this case, the cache will be empty and may still has a pending key\n        // on waiting map.\n        if (cache.state !== 'empty' && cache.state !== 'must-revalidate') {\n          break ignoreAndRequest;\n        }\n      }\n      // Create a deferred to resolve other requests for the same key when it's completed\n      const def = (0,fast_defer__WEBPACK_IMPORTED_MODULE_1__.deferred)();\n      axios.waiting.set(config.id, def);\n      // Adds a default reject handler to catch when the request gets aborted without\n      // others waiting for it.\n      def.catch(() => undefined);\n      await axios.storage.set(config.id, {\n        state: 'loading',\n        previous: overrideCache ?\n        // Simply determine if the request is stale or not\n        // based if it had previous data or not\n        cache.data ? 'stale' : 'empty' :\n        // Typescript doesn't know that cache.state here can only be 'empty' or 'stale'\n        cache.state,\n        data: cache.data,\n        // If the cache is empty and asked to override it, use the current timestamp\n        createdAt: overrideCache && !cache.createdAt ? Date.now() : cache.createdAt\n      }, config);\n      if (cache.state === 'stale' || cache.state === 'must-revalidate') {\n        updateStaleRequest(cache, config);\n      }\n      config.validateStatus = createValidateStatus(config.validateStatus);\n      // Hydrates any UI temporarily, if cache is available\n      if (cache.state === 'stale' || cache.data && cache.state !== 'must-revalidate') {\n        await (config.cache.hydrate == null ? void 0 : config.cache.hydrate(cache));\n      }\n      return config;\n    }\n    let cachedResponse;\n    if (cache.state === 'loading') {\n      const deferred = axios.waiting.get(config.id);\n      // The deferred may not exists when the process is using a persistent\n      // storage and cancelled  in the middle of a request, this would result in\n      // a pending loading state in the storage but no current promises to resolve\n      if (!deferred) {\n        // Hydrates any UI temporarily, if cache is available\n        if (cache.data) {\n          await (config.cache.hydrate == null ? void 0 : config.cache.hydrate(cache));\n        }\n        return config;\n      }\n      try {\n        // Deferred can't reuse the value because the user's storage might clone\n        // or mutate the value, so we need to ask it again.\n        // For example with memoryStorage + cloneData\n        await deferred;\n        const state = await axios.storage.get(config.id, config);\n        // This is a cache mismatch and should never happen, but in case it does,\n        // we need to redo the request all over again.\n        /* c8 ignore start */\n        if (!state.data) {\n          if (false) {}\n          return onFulfilled(config);\n        }\n        /* c8 ignore end */\n        cachedResponse = state.data;\n      } catch (err) {\n        // Hydrates any UI temporarily, if cache is available\n        /* c8 ignore start */\n        if (cache.data) {\n          await (config.cache.hydrate == null ? void 0 : config.cache.hydrate(cache));\n        }\n        /* c8 ignore end */\n        // The deferred is rejected when the request that we are waiting rejects its cache.\n        // In this case, we need to redo the request all over again.\n        return onFulfilled(config);\n      }\n    } else {\n      cachedResponse = cache.data;\n    }\n    // The cached data is already transformed after receiving the response from the server.\n    // Reapplying the transformation on the transformed data will have an unintended effect.\n    // Since the cached data is already in the desired format, there is no need to apply the transformation function again.\n    config.transformResponse = undefined;\n    // Even though the response interceptor receives this one from here,\n    // it has been configured to ignore cached responses = true\n    config.adapter = function cachedAdapter() {\n      return Promise.resolve({\n        config,\n        data: cachedResponse.data,\n        headers: cachedResponse.headers,\n        status: cachedResponse.status,\n        statusText: cachedResponse.statusText,\n        cached: true,\n        stale: cache.previous === 'stale',\n        id: config.id\n      });\n    };\n    return config;\n  };\n  return {\n    onFulfilled\n  };\n}\n\n/** Function to update all caches, from CacheProperties.update, with the new data. */\nasync function updateCache(storage, data, cacheUpdater) {\n  // Global cache update function.\n  if (typeof cacheUpdater === 'function') {\n    return cacheUpdater(data);\n  }\n  for (const [cacheKey, updater] of Object.entries(cacheUpdater)) {\n    if (updater === 'delete') {\n      await storage.remove(cacheKey, data.config);\n      continue;\n    }\n    const value = await storage.get(cacheKey, data.config);\n    if (value.state === 'loading') {\n      continue;\n    }\n    const newValue = await updater(value, data);\n    if (newValue === 'delete') {\n      await storage.remove(cacheKey, data.config);\n      continue;\n    }\n    if (newValue !== 'ignore') {\n      await storage.set(cacheKey, newValue, data.config);\n    }\n  }\n}\n\nfunction defaultResponseInterceptor(axios) {\n  /**\n   * Rejects cache for an response response.\n   *\n   * Also update the waiting list for this key by rejecting it.\n   */\n  const rejectResponse = async (responseId, config, clearCache) => {\n    // Updates the cache to empty to prevent infinite loading state\n    if (clearCache) {\n      await axios.storage.remove(responseId, config);\n    }\n    // Rejects the deferred, if present\n    const deferred = axios.waiting.get(responseId);\n    if (deferred) {\n      deferred.reject();\n      axios.waiting.delete(responseId);\n    }\n  };\n  const onFulfilled = async response => {\n    var _response$cached;\n    // When response.config is not present, the response is indeed a error.\n    if (!(response != null && response.config)) {\n      // Re-throws the error\n      throw response;\n    }\n    response.id = response.config.id;\n    (_response$cached = response.cached) != null ? _response$cached : response.cached = false;\n    const config = response.config;\n    // Request interceptor merges defaults with per request configuration\n    const cacheConfig = config.cache;\n    // Response is already cached\n    if (response.cached) {\n      return response;\n    }\n    // Skip cache: either false or weird behavior\n    // config.cache should always exists, at least from global config merge.\n    if (!cacheConfig) {\n      response.cached = false;\n      return response;\n    }\n    // Update other entries before updating himself\n    if (cacheConfig.update) {\n      await updateCache(axios.storage, response, cacheConfig.update);\n    }\n    if (!isMethodIn(config.method, cacheConfig.methods)) {\n      return response;\n    }\n    const cache = await axios.storage.get(response.id, config);\n    if (\n    // If the request interceptor had a problem or it wasn't cached\n    cache.state !== 'loading') {\n      return response;\n    }\n    // Config told that this response should be cached.\n    if (\n    // For 'loading' values (previous: stale), this check already ran in the past.\n    !cache.data && !(await testCachePredicate(response, cacheConfig.cachePredicate))) {\n      await rejectResponse(response.id, config, true);\n      return response;\n    }\n    // Avoid remnant headers from remote server to break implementation\n    for (const header of Object.keys(response.headers)) {\n      if (header.startsWith('x-axios-cache')) {\n        delete response.headers[header];\n      }\n    }\n    if (cacheConfig.etag && cacheConfig.etag !== true) {\n      response.headers[Header.XAxiosCacheEtag] = cacheConfig.etag;\n    }\n    if (cacheConfig.modifiedSince) {\n      response.headers[Header.XAxiosCacheLastModified] = cacheConfig.modifiedSince === true ? 'use-cache-timestamp' : cacheConfig.modifiedSince.toUTCString();\n    }\n    let ttl = cacheConfig.ttl || -1; // always set from global config\n    let staleTtl;\n    if (cacheConfig.interpretHeader) {\n      const expirationTime = axios.headerInterpreter(response.headers, axios.location);\n      // Cache should not be used\n      if (expirationTime === 'dont cache') {\n        await rejectResponse(response.id, config, true);\n        return response;\n      }\n      if (expirationTime !== 'not enough headers') {\n        if (typeof expirationTime === 'number') {\n          ttl = expirationTime;\n        } else {\n          ttl = expirationTime.cache;\n          staleTtl = expirationTime.stale;\n        }\n      }\n    }\n    const data = createCacheResponse(response, cache.data);\n    if (typeof ttl === 'function') {\n      ttl = await ttl(response);\n    }\n    if (cacheConfig.staleIfError) {\n      response.headers[Header.XAxiosCacheStaleIfError] = String(ttl);\n    }\n    const newCache = {\n      state: 'cached',\n      ttl,\n      staleTtl,\n      createdAt: Date.now(),\n      data\n    };\n    // Define this key as cache on the storage\n    await axios.storage.set(response.id, newCache, config);\n    // Resolve all other requests waiting for this response\n    const waiting = axios.waiting.get(response.id);\n    if (waiting) {\n      waiting.resolve();\n      axios.waiting.delete(response.id);\n    }\n    // Return the response with cached as false, because it was not cached at all\n    return response;\n  };\n  const onRejected = async error => {\n    // When response.config is not present, the response is indeed a error.\n    if (!error.isAxiosError || !error.config) {\n      // We should probably re-request the response to avoid an infinite loading state here\n      // but, since this is an unknown error, we cannot figure out what request ID to use.\n      // And the only solution is to let the storage actively reject the current loading state.\n      throw error;\n    }\n    const config = error.config;\n    const id = config.id;\n    const cacheConfig = config.cache;\n    const response = error.response;\n    // config.cache should always exist, at least from global config merge.\n    if (!cacheConfig || !id) {\n      throw error;\n    }\n    if (!isMethodIn(config.method, cacheConfig.methods)) {\n      // Rejects all other requests waiting for this response\n      await rejectResponse(id, config, true);\n      throw error;\n    }\n    const cache = await axios.storage.get(id, config);\n    if (\n    // This will only not be loading if the interceptor broke\n    cache.state !== 'loading' || cache.previous !== 'stale') {\n      // Rejects all other requests waiting for this response\n      await rejectResponse(id, config,\n      // Do not clear cache if this request is cached, but the request was cancelled before returning the cached response\n      error.code !== 'ERR_CANCELED' || error.code === 'ERR_CANCELED' && cache.state !== 'cached');\n      throw error;\n    }\n    if (cacheConfig.staleIfError) {\n      const cacheControl = String(response == null ? void 0 : response.headers[Header.CacheControl]);\n      const staleHeader = cacheControl && (0,cache_parser__WEBPACK_IMPORTED_MODULE_0__.parse)(cacheControl).staleIfError;\n      const staleIfError = typeof cacheConfig.staleIfError === 'function' ? await cacheConfig.staleIfError(response, cache, error) : cacheConfig.staleIfError === true && staleHeader ? staleHeader * 1000 //staleIfError is in seconds\n      : cacheConfig.staleIfError;\n      if (staleIfError === true ||\n      // staleIfError is the number of seconds that stale is allowed to be used\n      typeof staleIfError === 'number' && cache.createdAt + staleIfError > Date.now()) {\n        // re-mark the cache as stale\n        await axios.storage.set(id, {\n          state: 'stale',\n          createdAt: Date.now(),\n          data: cache.data\n        }, config);\n        // Resolve all other requests waiting for this response\n        const waiting = axios.waiting.get(id);\n        if (waiting) {\n          waiting.resolve();\n          axios.waiting.delete(id);\n        }\n        return {\n          cached: true,\n          stale: true,\n          config,\n          id,\n          data: cache.data.data,\n          headers: cache.data.headers,\n          status: cache.data.status,\n          statusText: cache.data.statusText\n        };\n      }\n    }\n    // Rejects all other requests waiting for this response\n    await rejectResponse(id, config, true);\n    throw error;\n  };\n  return {\n    onFulfilled,\n    onRejected\n  };\n}\n\n/** Returns true if the provided object was created from {@link buildStorage} function. */\nconst isStorage = obj => !!obj && !!obj['is-storage'];\nfunction hasUniqueIdentifierHeader(value) {\n  const headers = value.data.headers;\n  return Header.ETag in headers || Header.LastModified in headers || Header.XAxiosCacheEtag in headers || Header.XAxiosCacheLastModified in headers;\n}\n/** Returns true if value must be revalidated */\nfunction mustRevalidate(value) {\n  // Must revalidate is a special case and should not serve stale values\n  // We could use cache-control's parse function, but this is way faster and simpler\n  return String(value.data.headers[Header.CacheControl]).includes('must-revalidate');\n}\n/** Returns true if this has sufficient properties to stale instead of expire. */\nfunction canStale(value) {\n  if (hasUniqueIdentifierHeader(value)) {\n    return true;\n  }\n  return value.state === 'cached' && value.staleTtl !== undefined &&\n  // Only allow stale values after the ttl is already in the past and the staleTtl is in the future.\n  // In cases that just createdAt + ttl > Date.now(), isn't enough because the staleTtl could be <= 0.\n  // This logic only returns true when Date.now() is between the (createdAt + ttl) and (createdAt + ttl + staleTtl).\n  // Following the example below:\n  // |--createdAt--:--ttl--:---staleTtl--->\n  // [        past        ][now is in here]\n  Math.abs(Date.now() - (value.createdAt + value.ttl)) <= value.staleTtl;\n}\n/**\n * Checks if the provided cache is expired. You should also check if the cache\n * {@link canStale} and {@link mayUseStale}\n */\nfunction isExpired(value) {\n  return value.ttl !== undefined && value.createdAt + value.ttl <= Date.now();\n}\n/**\n * All integrated storages are wrappers around the `buildStorage` function. External\n * libraries use it and if you want to build your own, `buildStorage` is the way to go!\n *\n * The exported `buildStorage` function abstracts the storage interface and requires a\n * super simple object to build the storage.\n *\n * **Note**: You can only create an custom storage with this function.\n *\n * @example\n *\n * ```js\n * const myStorage = buildStorage({\n *   find: () => {...},\n *   set: () => {...},\n *   remove: () => {...},\n *   clear: () => {...}\n * });\n *\n * const axios = setupCache(axios, { storage: myStorage });\n * ```\n *\n * @see https://axios-cache-interceptor.js.org/guide/storages#buildstorage\n */\nfunction buildStorage({\n  set,\n  find,\n  remove,\n  clear\n}) {\n  return {\n    //@ts-expect-error - we don't want to expose this\n    'is-storage': 1,\n    set,\n    remove,\n    clear,\n    get: async (key, config) => {\n      let value = await find(key, config);\n      if (!value) {\n        return {\n          state: 'empty'\n        };\n      }\n      if (value.state === 'empty' || value.state === 'loading' || value.state === 'must-revalidate') {\n        return value;\n      }\n      // Handle cached values\n      if (value.state === 'cached') {\n        if (!isExpired(value)) {\n          return value;\n        }\n        // Tries to stale expired value\n        if (!canStale(value)) {\n          await remove(key, config);\n          return {\n            state: 'empty'\n          };\n        }\n        value = {\n          state: 'stale',\n          createdAt: value.createdAt,\n          data: value.data,\n          ttl: value.staleTtl !== undefined ? value.staleTtl + value.ttl : undefined\n        };\n        await set(key, value, config);\n        // Must revalidate is a special case and should not serve stale values\n        if (mustRevalidate(value)) {\n          return _extends({}, value, {\n            state: 'must-revalidate'\n          });\n        }\n      }\n      // A second check in case the new stale value was created already expired.\n      if (!isExpired(value)) {\n        return value;\n      }\n      if (hasUniqueIdentifierHeader(value)) {\n        return value;\n      }\n      await remove(key, config);\n      return {\n        state: 'empty'\n      };\n    }\n  };\n}\n\n/* c8 ignore start */\n/**\n * Clones an object using the structured clone algorithm if available, otherwise\n * it uses JSON.parse(JSON.stringify(value)).\n */\nconst clone =\n// https://caniuse.com/mdn-api_structuredclone (10/18/2023 92.51%)\ntypeof structuredClone === 'function' ? structuredClone : value => JSON.parse(JSON.stringify(value));\n/* c8 ignore stop */\n/**\n * Creates a simple in-memory storage. This means that if you need to persist data between\n * page or server reloads, this will not help.\n *\n * This is the storage used by default.\n *\n * If you need to modify it's data, you can do by the `data` property.\n *\n * @example\n *\n * ```js\n * const memoryStorage = buildMemoryStorage();\n *\n * setupCache(axios, { storage: memoryStorage });\n *\n * // Simple example to force delete the request cache\n *\n * const { id } = axios.get('url');\n *\n * delete memoryStorage.data[id];\n * ```\n *\n * @param {boolean | 'double'} cloneData Use `true` if the data returned by `find()`\n *   should be cloned to avoid mutating the original data outside the `set()` method. Use\n *   `'double'` to also clone before saving value in storage using `set()`. Disabled is\n *   default\n * @param {number | false} cleanupInterval The interval in milliseconds to run a\n *   setInterval job of cleaning old entries. If false, the job will not be created.\n *   Disabled is default\n * @param {number | false} maxEntries The maximum number of entries to keep in the\n *   storage. Its hard to determine the size of the entries, so a smart FIFO order is used\n *   to determine eviction. If false, no check will be done and you may grow up memory\n *   usage. Disabled is default\n */\nfunction buildMemoryStorage(cloneData = false, cleanupInterval = false, maxEntries = false) {\n  const storage = buildStorage({\n    set: (key, value) => {\n      if (maxEntries) {\n        let keys = Object.keys(storage.data);\n        // Tries to cleanup first\n        if (keys.length >= maxEntries) {\n          storage.cleanup();\n          // Recalculates the keys\n          keys = Object.keys(storage.data);\n          // Keeps deleting until there's space\n          while (keys.length >= maxEntries) {\n            // There's always at least one key here, otherwise it would not be\n            // in the loop.\n            delete storage.data[keys.shift()];\n          }\n        }\n      }\n      // Clone the value before storing to prevent future mutations\n      // from affecting cached data.\n      storage.data[key] = cloneData === 'double' ? clone(value) : value;\n    },\n    remove: key => {\n      delete storage.data[key];\n    },\n    find: key => {\n      const value = storage.data[key];\n      return cloneData && value !== undefined ? clone(value) : value;\n    },\n    clear: () => {\n      storage.data = Object.create(null);\n    }\n  });\n  storage.data = Object.create(null);\n  // When this program gets running for more than the specified interval, there's a good\n  // chance of it being a long-running process or at least have a lot of entries. Therefore,\n  // \"faster\" loop is more important than code readability.\n  storage.cleanup = () => {\n    const keys = Object.keys(storage.data);\n    let i = -1;\n    let value;\n    let key;\n    // Looping forward, as older entries are more likely to be expired\n    // than newer ones.\n    while (++i < keys.length) {\n      key = keys[i];\n      value = storage.data[key];\n      if (value.state === 'empty') {\n        storage.remove(key);\n        continue;\n      }\n      // If the value is expired and can't be stale, remove it\n      if (value.state === 'cached' && isExpired(value) && !canStale(value)) {\n        // this storage returns void.\n        storage.remove(key);\n      }\n    }\n  };\n  if (cleanupInterval) {\n    storage.cleaner = setInterval(storage.cleanup, cleanupInterval);\n  }\n  return storage;\n}\n\n// Remove first and last '/' char, if present\nconst SLASHES_REGEX = /^\\/|\\/$/g;\n/**\n * Builds an generator that receives a {@link CacheRequestConfig} and returns a value\n * hashed by {@link hash}.\n *\n * The value is hashed into a signed integer when the returned value from the provided\n * generator is not a `string` or a `number`.\n *\n * You can return any type of data structure.\n *\n * @example\n *\n * ```js\n * // This generator will return a hash code.\n * // The code will only be the same if url, method and data are the same.\n * const generator = buildKeyGenerator(({ url, method, data }) => ({\n *   url,\n *   method,\n *   data\n * }));\n * ```\n */\nfunction buildKeyGenerator(generator) {\n  return request => {\n    if (request.id) {\n      return request.id;\n    }\n    const key = generator(request);\n    if (typeof key === 'string' || typeof key === 'number') {\n      return `${key}`;\n    }\n    return `${(0,object_code__WEBPACK_IMPORTED_MODULE_2__.hash)(key)}`;\n  };\n}\nconst defaultKeyGenerator = buildKeyGenerator(({\n  baseURL,\n  url,\n  method,\n  params,\n  data\n}) => {\n  // Remove trailing slashes to avoid generating different keys for the \"same\" final url.\n  if (baseURL !== undefined) {\n    baseURL = baseURL.replace(SLASHES_REGEX, '');\n  } else {\n    // just to have a consistent hash\n    baseURL = '';\n  }\n  if (url !== undefined) {\n    url = url.replace(SLASHES_REGEX, '');\n  } else {\n    // just to have a consistent hash\n    url = '';\n  }\n  if (method !== undefined) {\n    method = method.toLowerCase();\n  } else {\n    // just to have a consistent hash\n    method = 'get';\n  }\n  return {\n    url: baseURL + (baseURL && url ? '/' : '') + url,\n    params: params,\n    method: method,\n    data: data\n  };\n});\n\n/**\n * Apply the caching interceptors for a already created axios instance.\n *\n * ```ts\n * const axios = setupCache(axios, OPTIONS);\n * ```\n *\n * The `setupCache` function receives global options and all [request\n * specifics](https://axios-cache-interceptor.js.org/config/request-specifics) ones too.\n * This way, you can customize the defaults for all requests.\n *\n * @param axios The already created axios instance\n * @param config The config for the caching interceptors\n * @returns The same instance with extended typescript types.\n * @see https://axios-cache-interceptor.js.org/config\n */\nfunction setupCache(axios, options = {}) {\n  var _options$ttl, _options$etag, _options$modifiedSinc, _options$interpretHea, _options$cacheTakeove, _options$staleIfError, _options$override, _options$hydrate;\n  const axiosCache = axios;\n  if (axiosCache.defaults.cache) {\n    throw new Error('setupCache() should be called only once');\n  }\n  axiosCache.location = typeof window === 'undefined' ? 'server' : 'client';\n  axiosCache.storage = options.storage || buildMemoryStorage();\n  if (!isStorage(axiosCache.storage)) {\n    throw new Error('Use buildStorage() function');\n  }\n  axiosCache.waiting = options.waiting || new Map();\n  axiosCache.generateKey = options.generateKey || defaultKeyGenerator;\n  axiosCache.headerInterpreter = options.headerInterpreter || defaultHeaderInterpreter;\n  axiosCache.requestInterceptor = options.requestInterceptor || defaultRequestInterceptor(axiosCache);\n  axiosCache.responseInterceptor = options.responseInterceptor || defaultResponseInterceptor(axiosCache);\n  axiosCache.debug = options.debug || function noop() {};\n  // CacheRequestConfig values\n  axiosCache.defaults.cache = {\n    update: options.update || {},\n    ttl: (_options$ttl = options.ttl) != null ? _options$ttl : 1000 * 60 * 5,\n    // Although RFC 7231 also marks POST as cacheable, most users don't know that\n    // and may have problems about why their \"create X\" route not working.\n    methods: options.methods || ['get', 'head'],\n    cachePredicate: options.cachePredicate || {\n      // All cacheable status codes defined in RFC 7231\n      statusCheck: status => [200, 203, 300, 301, 302, 404, 405, 410, 414, 501].includes(status)\n    },\n    etag: (_options$etag = options.etag) != null ? _options$etag : true,\n    // This option is going to be ignored by servers when ETag is enabled\n    // Checks strict equality to false to avoid undefined-ish values\n    modifiedSince: (_options$modifiedSinc = options.modifiedSince) != null ? _options$modifiedSinc : options.etag === false,\n    interpretHeader: (_options$interpretHea = options.interpretHeader) != null ? _options$interpretHea : true,\n    cacheTakeover: (_options$cacheTakeove = options.cacheTakeover) != null ? _options$cacheTakeove : true,\n    staleIfError: (_options$staleIfError = options.staleIfError) != null ? _options$staleIfError : true,\n    override: (_options$override = options.override) != null ? _options$override : false,\n    hydrate: (_options$hydrate = options.hydrate) != null ? _options$hydrate : undefined\n  };\n  // Apply interceptors\n  axiosCache.interceptors.request.use(axiosCache.requestInterceptor.onFulfilled, axiosCache.requestInterceptor.onRejected);\n  axiosCache.interceptors.response.use(axiosCache.responseInterceptor.onFulfilled, axiosCache.responseInterceptor.onRejected);\n  return axiosCache;\n}\n\n/**\n * Creates a simple storage. You can persist his data by using `sessionStorage` or\n * `localStorage` with it.\n *\n * **ImplNote**: Without polyfill, this storage only works on browser environments.\n *\n * @example\n *\n * ```js\n * const fromLocalStorage = buildWebStorage(localStorage);\n * const fromSessionStorage = buildWebStorage(sessionStorage);\n *\n * const myStorage = new Storage();\n * const fromMyStorage = buildWebStorage(myStorage);\n * ```\n *\n * @param storage The type of web storage to use. localStorage or sessionStorage.\n * @param prefix The prefix to index the storage. Useful to prevent collision between\n *   multiple places using the same storage.\n */\nfunction buildWebStorage(storage, prefix = 'axios-cache-') {\n  return buildStorage({\n    clear: () => {\n      for (const key in storage) {\n        if (key.startsWith(prefix)) {\n          storage.removeItem(key);\n        }\n      }\n    },\n    find: key => {\n      const json = storage.getItem(prefix + key);\n      return json ? JSON.parse(json) : undefined;\n    },\n    remove: key => {\n      storage.removeItem(prefix + key);\n    },\n    set: (key, value) => {\n      const save = () => storage.setItem(prefix + key, JSON.stringify(value));\n      try {\n        return save();\n      } catch (error) {\n        const allValues = Object.entries(storage).filter(item => item[0].startsWith(prefix)).map(item => [item[0], JSON.parse(item[1])]);\n        // Remove all expired values\n        for (const _value of allValues) {\n          if (_value[1].state === 'cached' && isExpired(_value[1]) && !canStale(_value[1])) {\n            storage.removeItem(_value[0]);\n          }\n        }\n        // Try save again after removing expired values\n        try {\n          return save();\n        } catch (_unused) {\n          // Storage still full, try removing the oldest value until it can be saved\n          // Descending sort by createdAt\n          const sortedItems = allValues.sort((a, b) => (a[1].createdAt || 0) - (b[1].createdAt || 0));\n          for (const item of sortedItems) {\n            storage.removeItem(item[0]);\n            try {\n              return save();\n            } catch (_unused2) {\n              // This key didn't free all the required space\n            }\n          }\n        }\n        // Clear the cache for the specified key\n        storage.removeItem(prefix + key);\n      }\n    }\n  });\n}\n\n\n//# sourceMappingURL=index.modern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/axios-cache-interceptor/dist/index.modern.js\n");

/***/ })

};
;